generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  userLevel     Int       @default(1)
  accounts      Account[]
  sessions      Session[]
  urls          Url[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Url {
  id           String    @id @default(cuid())
  userId       String
  url          String?
  slug         String?    @unique
  isCustomSlug Boolean?
  active       Boolean? //
  deleted      Boolean? //
  visits       Visit[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  validUntil   DateTime?
  user         User      @relation(fields: [userId], references: [id])
}

model Visit {
  id         String   @id
  urlId      String
  userAgent  String?
  browser    String?
  ipAddress  String?
  deviceType String?
  os         String?
  createdAt  DateTime @default(now())
  url        Url      @relation(fields: [urlId], references: [id])
}
